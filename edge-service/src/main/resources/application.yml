spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  security:
    oauth2:
      client:
        registration:
          keycloak: # client registration id
            client-id: edge-service
            client-secret: ${KEYCLOAK_CLIENT_SECRET:MAzBTLWBNlTgY00vwJLae05dyT8EU9gK}
            scope: openid,roles
        provider:
          keycloak: # client registration id used above
            issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/cnative}
  session:
    redis:
      namespace: cnative:edge
    timeout: 15s
  data:
    redis:
      host: localhost
      port: 6379
      connect-timeout: 2s
      timeout: 1s
  cloud:
    gateway:
      redis-rate-limiter:
        include-headers: true
      default-filters:
        - name: SaveSession
        - name: TokenRelay
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions:
              - java.io.IOException
              - java.util.concurrent.TimeoutException
            #              - java.net.ConnectException
            backoff:
              first-backoff: 100ms
              max-backoff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      routes:
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
        - id: catalog-service
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogServiceCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: orders-service
          uri: ${ORDERS_SERVICE_URL:http://localhost:9100}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: ordersServiceCircuitBreaker
                fallbackUri: forward:/catalog-fallback
server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 20
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15s
  timelimiter:
    configs:
      default:
        timeout-duration: 2s

logging:
  group:
    circuitbreaker:
      - io.github.resilience4j
      - org.springframework.cloud.circuitbreaker
  level:
    circuitbreaker: info

